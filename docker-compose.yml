#-----------------------------------------
#1. docker-compose -p microservices-comp3095-ecommerce -f docker-compose.yml up -d
# ---This command will start the container in detached mode without rebuilding the images (if they already exist )
#2. docker compose -p microservices comp3095 -f docker-compose.yml up -d --build
#---this command forces the rebuild of images, even if the image already exist, before starting theb
#
#
#------------------------------------------

services:

  product_service:
    image: product-service
    ports:
      - "8084:8084"
    build:
      context: ./product-service   # The directory where Dockerfile resides
      dockerfile: ./Dockerfile     # specify the Dockerfile for use to build image
    container_name: product-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongodb
    networks:
      - spring

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27018:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
    volumes:
      - ./data/mongo/product:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - spring

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    ports:
      - "8081:8081"  # Port to access the Mongo Express interface
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=admin
      - ME_CONFIG_MONGODB_SERVER=mongodb  #  MongoDB server container name
    depends_on:
      - mongodb
    networks:
      - spring

networks:
  spring:
    driver: bridge

# Volumes section
volumes:
  spring:
    driver: bridge
